
#creating the model
recipe <- recipe(
  koi_disposition ~ koi_fpflag_nt + koi_fpflag_ss + koi_fpflag_co +
    koi_fpflag_ec + koi_period + koi_time0bk + koi_impact + koi_duration + koi_depth + koi_prad + 
    koi_teq + koi_insol + koi_model_snr + koi_steff + koi_slogg + koi_srad + 
    ra + dec + koi_kepmag, data = train.koi) %>%
  step_dummy(all_nominal(), -all_outcomes()) %>%
  step_normalize(all_predictors()) %>%
  step_zv(all_predictors()) %>%
  step_impute_median(all_predictors())
  
tree_model <- decision_tree() %>%
  set_engine("rpart") %>%
  set_mode("classification")

set.seed(1)
as.factor(koi$koi_disposition)
cell_folds <- vfold_cv(train.koi, v = 5)

tree_wf <- workflow() %>%
  add_recipe(recipe)%>%
  add_model(tree_model)
  

#Tree Grid
tree_grid <- grid_regular(
  cost_complexity(),
  tree_depth(),
  levels = 5
)

tree_grid  

tree_res <- tree_wf %>%
  tune_grid(
    resamples = cell_folds,
    grid = tree_grid
  )

param_grid <- grid_regular(cost_complexity(range = c(-3, -1)), levels = 10)

tune_res <- tune_grid(
  tree_wf, 
  resamples = cell_folds, 
  grid = param_grid, 
  metrics = metric_set(accuracy)
)

tree_spec <- decision_tree() %>%
  set_engine("rpart")

#classification tree

class_tree_spec <- tree_spec %>%
  set_mode("classification")
  
#making column into factor

koi$koi_disposition <-as.factor(koi$koi_disposition)

class_tree_fit <- class_tree_spec %>%
  fit(koi$koi_disposition ~ ., data = koi)

class_tree_fit

class_tree_fit %>%
  extract_fit_engine() %>%
  rpart.plot()
  
#the training accuracy

accurate = augment(class_tree_fit, new_data = koi) %>%
  accuracy(truth = koi_disposition, estimate = .pred_class)
accurate
  
#the confusion matrix

confmat = augment(class_tree_fit, new_data = koi) %>%
  conf_mat(truth = koi_disposition, estimate = .pred_class)
confmat

#fitting the model on training data

class_tree_fit <- fit(class_tree_spec, koi_disposition ~ ., data = train.koi)

class_tree_wf <- workflow() %>%
  add_model(class_tree_spec %>% set_args(cost_complexity = tune())) %>%
  add_recipe(recipe)

koi_fold <- vfold_cv(train.koi)

param_grid <- grid_regular(cost_complexity(range = c(-3, -1)), levels = 10)

tune_res <- tune_grid(
  class_tree_wf, 
  resamples = koi_fold, 
  grid = param_grid, 
  metrics = metric_set(accuracy))

autoplot(tune_res)

best_complexity <- select_best(tune_res)

class_tree_final <- finalize_workflow(class_tree_wf, best_complexity)

class_tree_final_fit <- fit(class_tree_final, data = train.koi)
class_tree_final_fit

class_tree_final_fit %>%
  extract_fit_engine() %>%
  rpart.plot()
  
koi_split <- initial_split(koi,
                           strata = koi_disposition)

final_tree_fit = class_tree_final %>% last_fit(koi_split)

final_tree_fit %>%
  collect_metrics()
